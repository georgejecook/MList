import "pkg:/source/roku-list/ItemViewManager.bs"
import "pkg:/source/roku-list/ListMixin.bs"

class ListItemViewManager extends ItemViewManager

  function new(list, container, minPos = 0, maxPos = 1080)
    super("ListItemViewManager", list, container, 1, minPos, maxPos)
    m.delegate = list.rowEvents
  end function

  override function getRenderer(index)
    return m.components[index]
  end function

  override function createRenderers(content)

    'TODO remove/recycle views

    y = 0
    w = m.owner.width

    if content <> invalid
      index = 0
      for each item in content.getChildren(-1, 0)
        settings = ListMixin.getRowSettings(m.owner, item)

        if item.rowCompName <> invalid and item.rowCompName = "RectComp"
          component = m.creatRectangle(item, index, settings)
        else
          component = m.createHorizontalRow(item, index, settings)
        end if
        component.index = index
        component.screenState = "offScreen"

        m.components.push(component)
        index++
      end for
    end if
  end function

  function createHorizontalRow(rowContent, index, settings)
    component = m.container.createChild("HorizontalRow")
    component.id = str(index).trim()
    component.screenState = "offScreen"
    component.owner = m.owner
    component.content = rowContent
    component.isOnScreen = index < 5

    return component
  end function

  function creatRectangle(rowContent, index, settings)
    component = m.container.createChild("Rectangle")
    component.id = str(index).trim()
    component.color = "#aaffaa"
    component.addFields({ "content": rowContent 
      "isFocusable": true
      "isHidden": false
      "isFocused": false
    })
    component.width = 1920
    component.height = 300
    component.owner = m.owner
    component.content = rowContent

    return component
  end function

  override function updateLayout()
    y = 0
    w = m.owner.width

    for each component in m.components
      settings = ListMixin.getRowSettings(m.owner, component.content)
      component.visible = component.content.isHidden <> true

      if component.visible
        component.translation = [0, y]

        'TODO better handle the whole visibility

        y += component.height + settings.space

        m.rects.push({ 
          translation: component.translation
          size: [w, component.height] 
          index: component.index
        })
        m.visibleComponents.push(component)
        m.visibleItems.push(component.content)
      else
        m.hiddenComponents.push(component)
      end if

    end for

  end function

  override function applyScreenStateMap(screenStateMap)
    ' ? "updating screenStateMap: " ; formatJson(screenStateMap)
    for each id in screenStateMap
      component = m.components[id.toInt()]

      if component <> invalid
        component.screenState = screenStateMap[id]
        if component.screenState = "onScreen"
          m.renderedComponents.push(component)
        end if
      else
        ' ? "ERROR could not find visible component for "; id
      end if
    end for

  end function
end class