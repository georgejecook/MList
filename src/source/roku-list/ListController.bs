class ListController
  public list = invalid

  function new(list)
    m.list = list
  end function
  ' function init()
  '   registerLogger("List")
  '   m.rowsGroup = m.top.findNode("rowsGroup") 
  '   m.moveAnimationInterpolator = m.top.findNode("moveAnimationInterpolator") 
  '   m.moveAnimation = m.top.findNode("moveAnimation") 
  '   m.moveAnimationInterpolator.observeField("fraction", "onAnimationFractionChange")
  '   ' m.top.clippingRect = [0,0,1920,550]
  '   m.overlay = m.top.findNode("overlay") 
  '   m.focusTimer = m.top.findNode("focusTimer") 
  '   m.cellProvider = m.global.cellProvider
  '   m.cellTracker = m.global.cellTracker
  '   m.content = invalid
  '   m.numberOfRowsToShow = 3
  '   m.top.rowFocused = 0
  '   m.visibleLists = []
  '   m.hiddenLists = []
  '   m.lists = []
  '   m.lastStates = {}
  '   m.content = invalid
  '   m.focusTimer.observeField("fire", "currFocusItemIndexChanged")
  '   resetState()
  ' end function

  ' function resetState()
  '   m.currentY = 0
  '   m.listIndex = 0
  '   m.rowsGroup.removeChildren(m.rowsGroup.getChildren(-1, 0))

  '   m.lists = []

  '   if m.content <> invalid
  '     for each item in m.content.getChildren(-1, 0)
  '       if item.cellType <> invalid and item.cellType = "RectComp"
  '         list = makeRectComp(item)
  '       else
  '         list = makeList(item)
  '       end if
  '       m.lists.push(list)
  '     end for
  '   end if

  '   'TODO - MU namespace not resolving - INVESTIGATE
  '   addListListeners()
  '   m.currentList = m.visibleLists[m.top.rowFocused]
  '   moveYFocus(0)
  '   setInitialTimer = m.top.findNode("setInitialTimer")
  '   setInitialTimer.observeField("fire", "onSetInitialTimerFire")
  '   setInitialTimer.control = "start"
  '   updateRowFocus(0)
  ' end function

  ' function onSetInitialTimerFire()
  '   m.logMethod(">>onSetInitialTimerFire")
  '   layoutLists()
  '   for each row in m.visibleLists
  '     ' row.screenState = "buffer"
  '     row.screenState = "offScreen"
  '   end for
  '   updateRowStates(0, 0, 5, 10)
  ' end function

  ' function layoutLists()
  '   m.currentY = 0

  '   m.visibleLists = []
  '   m.hiddenLists = []
  '   for each list in m.lists
  '     list.visible = not list.isHidden
  '     if list.visible
  '       list.translation = [0, m.currentY]
  '       if list.subType() = "Rectangle"
  '         m.currentY += list.height + 40
  '       else
  '         m.currentY += m.top.cellSize[1] + m.top.cellSpacing[1] + 40
  '       end if
  '       m.visibleLists.push(list)
  '     else
  '       m.hiddenLists.push(list)
  '     end if
  '   end for

  ' end function

  ' function onContentChange()
  '   if m.content = invalid or not m.content.isSameNode(m.top.content)
  '     m.content = m.top.content
  '     resetState()
  '   end if
  ' end function

  ' function onAnimateToRowChange()
  '   if m.content <> invalid
  '     animateToIndex(m.top.rowFocused, m.top.animateToRow, m.top.fastAnimationSpeed)
  '   end if
  ' end function

  ' function makeList(rowContent)
  '   list = m.rowsGroup.createChild("HorizontalRow")
  '   list.id = str(m.listIndex).trim()
  '   list.cellSize = m.top.cellSize
  '   list.cellSpacing = m.top.cellSpacing
  '   list.numCols = m.top.numCols
  '   list.unfocusCellScale = m.top.unfocusCellScale
  '   list.unfocusCount = m.top.unfocusCount
  '   list.screenState = "offScreen"
  '   list.content = rowContent
  '   list.isOnScreen = m.listIndex < 5
  '   m.listIndex++

  '   return list
  ' end function

  ' function makeRectComp(rowContent)
  '   list = m.rowsGroup.createChild("Rectangle")
  '   list.id = str(m.listIndex).trim()
  '   list.color = "#aaffaa"
  '   list.addFields({ "content": rowContent })
  '   list.addFields({ "isFocusable": true })
  '   list.addFields({ "isHidden": false })
  '   list.addFields({ "isFocused": false })
  '   list.width = 1920
  '   list.height = 300
  '   list.content = rowContent
  '   m.listIndex++

  '   return list
  ' end function

  ' function addListListeners()
  '   for each list in m.visibleLists
  '     list.observeField("itemFocused", "itemFocusedChanged")
  '     list.observeField("itemUnfocused", "itemUnfocusedChanged")
  '     list.observeField("itemSelected", "itemSelectedChanged")
  '     ' list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
  '     list.observeField("isHidden", "onListIsHiddenChange")
  '     list.observeField("isFocusable", "onListIsFocuableChange")
  '     list.observeField("currTarget", "onCurrTargetChange")
  '   end for
  ' end function

  ' function itemFocusedChanged()
  '   m.top.itemFocused = m.currentList.itemFocused
  ' end function

  ' function itemUnfocusedChanged()
  '   m.top.itemUnfocused = m.currentList.itemUnfocused
  ' end function

  ' function itemSelectedChanged()
  '   m.top.itemSelected = m.currentList.itemSelected
  ' end function

  ' function currFocusItemIndexChanged() 
  '   ' ? "currFocusItemIndexChanged " ; 
  '   list = m.visibleLists[m.top.rowFocused]
  '   if list <> invalid and list.subType() = "HorizontalRow"
  '     index = list.currFocusItemIndex
  '     m.top.currFocusItemIndex = index
  '     rect = getBoundsForIndex(m.top.rowFocused, int(index))

  '     if rect <> invalid
  '       ' ? " rect is "; formatJson(rect)
  '       m.overlay.width = rect.height
  '       m.overlay.height = rect.width
  '       yOffset = list.translation[1] + m.rowsGroup.translation[1]

  '       'floating
  '       ' if m.list.content.yOffset <> invalid
  '       '   yOffset -= m.currentList.content.yOffset 
  '       ' end if
  '       m.overlay.translation = [rect.x, rect.y + yOffset]
  '     else
  '       ? " no rect for focused item"
  '     end if
  '   end if
  ' end function

  ' function onAnimationFractionChange()
  '   ' m.logInfo("onAnimationFractionChange", m.moveAnimationInterpolator.fraction)
  '   y = m.rowsGroup.translation[1]
  '   index = getListAtY(y)

  '   if m.moveAnimationInterpolator.fraction = 1
  '     if index = -1
  '       index = 0
  '     end if
  '     updateRowFocus(index)
  '   else
  '     ' m.logInfo(">>>", y, index, m.top.rowFocused)
  '     if index <> -1 and index <> m.top.rowFocused and ((index mod 10) = 0 or index < 10 or index < m.content.getchildCount() - 10)
  '       updateRowStates(m.currentDirection, index)
  '     end if
  '     nextIndex = getListAtY(y - 1400)
  '     'TODO - actually run this propertly
  '     m.visibleLists[nextIndex].isOnScreen = true
  '   end if

  ' end function


  ' function updateRowStates(direction, newIndex, beforeCount = 5, afterCount = 10)
  '   ' ? "new Index" ; newIndex; " direction "; direction
  '   if direction < 0
  '     numberOfRowsToShowBefore = beforeCount
  '     numberOfRowsToShowAfter = afterCount
  '   else
  '     numberOfRowsToShowBefore = beforeCount
  '     numberOfRowsToShowAfter = afterCount
  '   end if
  '   updateRowVisibilities(newIndex, m.top.rowFocused, numberOfRowsToShowBefore, numberOfRowsToShowAfter)
  ' end function

  ' function getListAtY(yPos)
  '   for i = 0 to m.visibleLists.count() - 1
  '     listYPos = getListFocusYPosition(i)
  '     if listYPos >= abs(yPos)
  '       return i
  '     end if
  '   end for

  '   return -1
  ' end function

  ' function onListIsHiddenChange(evt)
  '   layoutLists()
  ' end function

  ' function onListIsFocuableChange(evt)
  '   'TODO update focus if we're currently focused on the list
  ' end function

  ' function onCurrTargetChange(evt)
  '   currTarget = m.currentList.currTarget
  '   ' ? "currTargetSet"; formatJson(currTarget)
  ' end function

  ' function moveYFocus(offset, isAnimated = true)
  '   ' m.logMethod(">>moveYFocus")
  '   newIndex = m.top.rowFocused + offset

  '   'TODO - I have no need for vertical wrapping; if someone wants it
  '   'they are free to submit a pr :)
  '   if newIndex < 0
  '     newIndex = 0
  '   end if

  '   if newIndex > m.visibleLists.count() - 1
  '     newIndex = m.visibleLists.count() - 1
  '   end if

  '   m.currentDirection = newIndex - m.top.rowFocused

  '   'ensure we dont' move to a non-focusable rowlist
  '   nextList = m.visibleLists[newIndex]
  '   while nextList <> invalid and not nextList.isFocusable and newIndex < m.visibleLists.count() - 1 and newIndex > -1
  '     newIndex += m.currentDirection
  '     nextList = m.visibleLists[newIndex]
  '   end while

  '   if m.currentList <> invalid
  '     m.currentList.isFocused = false
  '   end if

  '   if m.currentList = invalid or not m.currentList.isSameNode(nextList)
  '     m.currentList = nextList 

  '     if m.currentList <> invalid
  '       if isAnimated
  '         animatetoIndex(m.top.rowFocused, newIndex)
  '       else
  '         m.rowsGroup.translation = [0, - m.currentList.translation[1]]
  '         updateRowFocus(newIndex)
  '       end if
  '     end if
  '   end if
  ' end function

  ' function animateToIndex(oldIndex, index, fastAnimationSpeed = 1)
  '   m.logMethod("animateToIndex from", oldIndex, "to", index)
  '   nextList = m.visibleLists[index]

  '   if nextList = invalid
  '     m.logError("could not idenitfy next list with index", index)
  '     return invalid
  '   end if

  '   targetY = getListFocusYPosition(index)
  '   'TODO count visible rows between oldIndex and newIndex
  '   steps = abs(oldIndex - index)
  '   if m.moveAnimation.state = "play"
  '     m.moveAnimation.control = "pause"
  '   end if
  '   ' ? "targetY = "; targetY
  '   ' m.moveAnimationInterpolator.keyValue = [[0, 0], [0, targetY]]
  '   m.moveAnimationInterpolator.keyValue = [[0.0, m.rowsGroup.translation[1]], [0.0, - targetY]]
  '   m.moveAnimation.duration = (steps * m.top.animSpeed) / fastAnimationSpeed

  '   if m.moveAnimation.state = "puse"
  '     m.moveAnimation.control = "resume"
  '   else
  '     m.moveAnimation.control = "start"
  '   end if

  ' end function

  ' function getListFocusYPosition(index) 
  '   list = m.visibleLists[index] 
  '   y = 0
  '   if list <> invalid
  '     y = list.translation[1]
  '     if list.content <> invalid and list.content.yOffset <> invalid
  '       y -= list.content.yOffset
  '       ' m.logInfo("list", index, "has a yoffset", list.content.yOffset)
  '     end if
  '   end if
  '   return y
  ' end function

  ' function updateRowFocus(index)
  '   m.logMethod("updateRowFocus", index)
  '   m.currentList = m.visibleLists[index]

  '   if m.currentList <> invalid
  '     m.top.rowFocused = index
  '     m.currentList.isFocused = m.currentList.isFocusable

  '     if m.currentList.content <> invalid and m.currentList.subType() = "HorizontalRow"
  '       focusedItem = m.currentList.content.getChild(m.currentList.itemFocused)
  '       if focusedItem <> invalid
  '         m.top._focusedRenderer = m.cellTracker@.getCellForContentId(focusedItem.id)
  '       else
  '         m.top._focusedRenderer = invalid
  '       end if
  '       m.logWarn("focusing on list ", m.currentList.content.title)
  '       m.currentList.setFocus(true)

  '     end if
  '   else
  '     m.top.rowFocused = -1
  '   end if

  '   updateRowStates(0, m.top.rowFocused)
  ' end function

  ' function updateRowVisibilities(newIndex, oldIndex, numberOfRowsToShowBefore = 1, numberOfRowsToShowAfter = 3) as void
  '   ' m.logMethod("updateRowVisibilities newIndex", newIndex, "old", oldIndex)
  '   states = {}
  '   if m.content = invalid or newIndex = oldIndex
  '     return 
  '   end if

  '   setListStateMap(states, 0, m.content.getChildCount(), m.top.rowHidingMode)
  '   setListStateMap(states, newIndex - numberOfRowsToShowBefore, newIndex + numberOfRowsToShowAfter, "buffer")

  '   ' ? "updating states: " ; formatJson(states)
  '   for each rowId in states
  '     list = m.visibleLists[rowId.toInt()]
  '     if list <> invalid and list.hasField("screenState")
  '       list.screenState = states[rowId]
  '     else
  '       ' ? "ERROR could not find visible list for "; rowId
  '     end if
  '   end for

  '   m.lastStates = states
  ' end function

  ' function setListStateMap(states, startIndex, endIndex, state)
  '   for i = startIndex to endIndex

  '     if i >= 0 and i < m.visibleLists.count()
  '       row = m.visibleLists[i]

  '       if row <> invalid
  '         states[row.id] = state
  '       end if
  '     end if
  '   end for
  ' end function


  ' function getBoundsForIndex(rowIndex, index)
  '   rect = invalid
  '   list = m.visibleLIsts[rowIndex]
  '   if list <> invalid and list.subType() = "HorizontalRow"
  '     set = list.currTargetSet
  '     ' ? " set.focusIndex " ; set.focusIndex + list.focusIndexOffset
  '     if set <> invalid
  '       return set[index]
  '     end if
  '   end if

  '   if rect <> invalid
  '     ' ? "INDEX" ; index ; " " ; formatJson(dynamicCell.boundingRect()); "  " ; formatJson(dynamicCell.localBoundingRect()); "  " ; formatJson(dynamicCell.sceneBoundingRect()); "  " 
  '     return rect
  '   else
  '     ? "could not find target "
  '     return {
  '       width: 0
  '       height: 0
  '       translation: [0, 0]
  '     }
  '   end if

  ' end function

  ' function isHiddenChange()
  '   ? "ishiddenchange"
  '   if m.top.isHidden
  '     for each rowId in m.laststates
  '       list = m.visibleLists[rowId.toInt()]
  '       if list <> invalid
  '         list.screenState = "offScreen"
  '       else
  '         ? "ERROR could not find visible list for "; rowId
  '       end if
  '     end for
  '   else
  '     for each rowId in m.laststates
  '       list = m.visibleLists[rowId.toInt()]
  '       if list <> invalid
  '         list.screenState = m.laststates[rowId]
  '       else
  '         ? "ERROR could not find visible list for "; rowId
  '       end if
  '     end for

  '   end if

  ' end function

  ' function getFocusedBounds()
  '   return getBoundsForIndex(m.top.rowFocused, int(m.currentList.currFocusItemIndex))
  ' end function


  ' '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ' '++ KeyPress
  ' '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  ' function onKeyPressUp() as boolean
  '   m.logMethod("onKeyPressUp")
  '   moveYFocus(-1)
  '   return true
  ' end function

  ' function onKeyPressDown() as boolean
  '   m.logMethod("onKeyPressDown")
  '   moveYFocus(1)
  '   return true
  ' end function


  ' function getLongPressIntervalForKey(key) as float
  '   m.logMethod("getLongPressIntervalForKey", key)
  '   if key = "up" or key = "down"
  '     return 0.5
  '   else
  '     return 0
  '   end if
  ' end function

  ' function onLongPressStart(key) as boolean
  '   m.logMethod(">>>>onLongPressStart", key)

  '   if key = "up" or key = "down"
  '     m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
  '     if key = "up"
  '       targetIndex = 0 
  '     else
  '       targetIndex = m.visibleLists.count() - 1
  '     end if

  '     animateToIndex(m.top.rowFocused, targetIndex)
  '     return true
  '   end if

  '   return false
  ' end function

  ' function onLongPressFinish(key) as boolean
  '   if key = "up" or key = "down"
  '     'fixed focus 
  '     m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
  '     index = getListAtY(m.rowsGroup.translation[1])
  '     if m.currentDirection = -1
  '       nextIndex = index - 1
  '     else
  '       nextIndex = index
  '       index -= m.currentDirection
  '     end if

  '     if nextIndex < 0
  '       nextIndex = 0
  '     else if index > m.visibleLists.count() - 1
  '       nextIndex = m.visibleLists.count() - 1
  '     end if

  '     animateToIndex(index, nextIndex)
  '     return true
  '   end if

  '   return false
  ' end function

end class