import "pkg:/source/roku-list/BaseClass.bs"

class ItemScroller extends BaseClass

  public rects = []
  public items = []
  public components = []
  public viewManager = invalid
  public focusManager = invalid
  public renderedComponents = []
  public onScreenCompMap = []
  public index = 0
  public indexPosition = 0
  public focusedIndex = 0
  public nextIndex = 0
  public nextPosition = 0
  public targetIndex = 0
  public container = invalid
  public direction = 0
  public axes = 0 'x = 0, y =1
  public minPos = 0
  public maxPos = 1080
  public animSpeed = 0.3
  public regularAnimSpeed = 0.3
  public fastAnimSpeed = 2
  public componentBufferMode = "offScreen"
  public numberOfItems = 0
  public screenRect = { translation: [0, 0], size: [1920, 1080] }

  function new(viewManager, axes, minPos, maxPos, moveAnimation, moveAnimationInterpolator)
    super("ItemScroller")
    m.viewManager = viewManager
    m.container = m.viewManager.container
    m.axes = axes
    m.minPos = minPos
    m.maxPos = maxPos
    m.moveAnimation = moveAnimation
    m.moveAnimationInterpolator = moveAnimationInterpolator
    m.observeNodeField(moveAnimationInterpolator, "fraction", m.onAnimationFractionChange, "value", false, m)

  end function

  public function onViewManagerUpdate()
    m.components = m.viewManager.visibleComponents ' content items 
    m.items = m.viewManager.visibleItems ' content items 
    m.rects = m.viewManager.rects ' calculated views for the items
    m.numberOfItems = m.items.count()
    owner = m.viewManager.owner
    m.delegates = [owner]

    if owner.delegate <> invalid
      m.delegates.push(owner.delegate)
    end if

    'TODO - use bounds here
    m.screenRect = { translation: owner.translation, size: [owner.width, owner.height] }
  end function

  public function reset()
    'TODO
    m.moveToIndex(0, invalid, false)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ collection movement
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function moveToEnd(direction, screenPos = invalid, animated = true, fast = false)
    if direction = -1
      index = 0
    else
      index = m.numberOfItems - 1
    end if
    m.moveToIndex(index, screenPos, animated, fast)
  end function

  function move(offset, screenPos = invalid, animated = true, fast = false)

    index = m.index + offset

    if offset > 0
      direction = 1
    else 
      direction = -1
    end if

    index = m.getValidTargetIndex(index, direction)

    m.logInfo("move", m.index, offset, index, screenPos, animated, fast)

    if index <> -1
      m.moveToIndex(index, screenPos, animated, fast)
    end if
  end function

  function getValidTargetIndex(index, direction)
    if index < 0
      return 0
    end if

    if index > m.numberOfItems - 1
      return m.getValidTargetIndex(m.numberOfItems - 1, -1)
    end if

    item = m.items[index]
    while item <> invalid and item.isFocusable <> false and index < m.numberOfItems - 1 and index > -1
      index += direction
      item = m.items[index]
    end while

    return index
  end function

  function moveToIndex(index, screenPos = invalid, animated = true, fast = false)
    m.logInfo("moveToIndex", index, screenPos, animated)

    targetTranslation = m.getTargetTranslation(index, screenPos)

    if targetTranslation = invalid
      return false
    end if

    m.targetIndex = index

    if m.targetIndex > m.index
      m.direction = 1
    else
      m.direction = -1
    end if

    m.setNextIndex(m.index + m.direction)

    if fast
      m.animSpeed = m.regularAnimSpeed / m.fastAnimSpeed
    else 
      m.animSpeed = m.regularAnimSpeed
    end if


    ' m.logInfo("moving to ", targetTranslation, animated)
    if animated
      'TODO count visible rows between oldIndex and newIndex
      steps = abs(m.index - index)
      if steps = 0
        steps = 1
      end if

      if m.moveAnimation.state = "play"
        m.moveAnimation.control = "pause"
      end if
      m.moveAnimationInterpolator.keyValue = [m.container.translation, targetTranslation]
      m.moveAnimation.duration = steps * m.animSpeed

      if m.moveAnimation.state = "pause"
        m.moveAnimation.control = "resume"
      else
        m.moveAnimation.control = "start"
      end if
    else
      m.container.translation = targetTranslation
      'TODO -check if jump is bigger than a certain amount
      m.updateRenderedComponents()
      m.setFocusIndex(index, false)
    end if
  end function

  function getTargetTranslation(index, screenPos = invalid)
    itemRect = m.rects[index]

    if itemRect = invalid
      m.logWarn("no itemRect for index", index)
      return [-1,-1]
    end if

    screenPos = m.getScreenPositionForItem(itemRect, m.direction)
    targetPos = m.getOffsetForScreenPosition(itemRect, screenPos)
    ' ? " POS " ; targetPos ; " dir " ; m.direction ; " sp " ; screenPos ; " it " ; itemRect.translation[m.axes]

    if m.axes = 0
      return [- targetPos, m.container.translation[1]]
    else
      return [m.container.translation[0], - targetPos]
    end if

  end function

  function finishAnimating()
    ' ? "stop ci " ; m.index ; " ni " ; m.nextIndex
    if m.direction = -1
      nextIndex = m.nextIndex + 1
    else
      nextIndex = m.nextIndex
    end if
    m.moveToIndex(nextIndex, invalid, true, m.fastAnimSpeed)
  end function

  function setNextIndex(index, screenPos = invalid)
    m.nextIndex = index
    nextRect = m.rects[m.nextIndex]
    screenPos = m.getScreenPositionForItem(nextRect, m.direction, screenPos)
    nextTranslation = m.getTargetTranslation(index, screenPos)

    if nextTranslation <> invalid
      m.nextPosition = nextTranslation[m.axes]
    else
      m.nextPosition = m.indexPosition
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ itemRect positions
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function getScreenPositionForItem(itemRect, direction = 0, screenPos = invalid)
    if itemRect <> invalid
      if screenPos <> invalid
        return screenPos
      else if itemRect.screenPos <> invalid
        return itemRect.screenPos
      else if m.direction = -1
        return m.minPos
      else if m.direction = 1
        'TODO - calculate position that can fit on screen
        return m.minPos ' fixed focus
        ' return m.maxPos - itemRect.width
      end if
    end if
    return m.minPos
  end function

  function getOffsetForScreenPosition(itemRect, screenPos)
    if itemRect <> invalid
      return itemRect.translation[m.axes] + screenPos
    else
      return m.minPos
    end if
  end function

  function getIndexAtPosition(position, direction)
    for i = 0 to m.rects.count() - 1
      itemRect = m.rects[i]
      screenPos = m.getScreenPositionForItem(itemRect, direction)
      itemPos = m.getOffsetForScreenPosition(itemRect, screenPos)
      ' ? "i "; i ; " pos "; abs(position) ; " ip " ; itemPos ; " sp " ; screenPos
      if itemPos > abs(position)
        return i - 1
      end if
    end for

    return -1
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ animation callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onAnimationFractionChange(fraction)
    ' m.logInfo("onAnimationFractionChange", fraction)
    position = m.container.translation[m.axes]
    index = m.getIndexAtPosition(position, m.direction)
    
    
    if fraction = 1
      m.focusManager.onFocusAnimationUpdate(1)    
      if index <> m.index
        m.setFocusIndex(index, false)
      end if
      m.targetIndex = -1
    else
      m.focusManager.onContainerPositionChange(position)    
      if index <> m.index 
        m.focusManager.onFocusAnimationUpdate(1)    
        m.setFocusIndex(index, true)
      end if
    end if

  end function

  ' /**
  '  * @member setFocusIndex
  '  * @memberof module:ItemScroller
  '  * @instance
  '  * @function
  '  * @description Responsible for all state updates, and hooks pertaning to focus position.
  '  *       NOTE : does NOT update position - you should be in position when calling this. for speed does not recalculate index: you should know the index when you call me!
  '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn' have to be targetIndex)
  '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
  '  */
  function setFocusIndex(index, isMoving, screenPos = invalid)
    'This MUST be called infrequently
    if index = -1
      m.index = 0
      m.setNextIndex(0, screenPos)
    else
      m.index = index
      m.setNextIndex(m.index + m.direction)
    end if

    'TODO -note - we need to know what screenPos WAS in a floating scenario!!
    m.indexPosition = m.getTargetTranslation(m.index, screenPos)[m.axes]

    'things that need to happen in here:
    '1. update the screen state
    ' this should be based on the look aheads/look behinds.. 
    if ((index mod 10) = 0 or index < 10 or index < m.numberOfItems - 10)
      m.updateRenderedComponents()
    end if

    m.notifyViewportEvents(isMoving)

    m.focusManager.setFocusPosition(m.index, m.indexPosition, m.nextIndex, m.nextPosition, m.direction)

  end function

  function notifyViewportEvents(isMoving)
    'maintain a collection of controls that are in bounds right now:
    m.onScreenCompMap = m.getComoponentsInViewPort(- m.container.translation[m.axes])

    'we assign events to each component AND send them to the owner, so it can choose what to do
    events = []

    for each id in m.onScreenCompMap
      comp = m.components[id.toInt()]
      if comp <> invalid
        if m.onScreenCompMap[id] = true and comp.isOnScreen = false
          'ensure clients always get willEnter before didEnter
          if comp.listEvent = invalid or comp.listEvent.name <> "willEnter" 
            event = { name: "willEnter", direction: m.direction, index: comp.index }
            comp.listEvent = event
            events.push(event)
          end if
          event = { name: "didEnter", direction: m.direction, index: comp.index }
          comp.listEvent = event
          events.push(event)
          comp.isOnScreen = true
        else if m.onScreenCompMap[id] = false and comp.isOnScreen = true
          'ensure clients always get willExit before didExit
          if comp.listEvent = invalid or comp.listEvent.name <> "willExit" 
            event = { name: "willExit", direction: m.direction, index: comp.index }
            comp.listEvent = event
            events.push(event)
          end if
          event = { name: "didExit", direction: m.direction, index: comp.index }
          comp.listEvent = event
          events.push(event)
          comp.isOnScreen = false
        end if
      end if 
    end for

    'notify what WILL come into view
    if isMoving and m.nextIndex <> m.index
      nextTranslation = m.getTargetTranslation(m.nextIndex, screenPos)
      nextOnScreenCompMap = m.getComoponentsInViewPort(nextTranslation[m.axes])
      ' m.logInfo("nextOnScreenCompMap", nextOnScreenCompMap)
      for each id in nextOnScreenCompMap
        comp = m.components[id.toInt()]
        if comp <> invalid
          ' m.logInfo(id, comp.isOnScreen, nextOnScreenCompMap[id])
          if nextOnScreenCompMap[id] = true and comp.isOnScreen = false
            event = { name: "willEnter", direction: m.direction, index: comp.index }
            comp.listEvent = event
            events.push(event)
          else if nextOnScreenCompMap[id] = false and comp.isOnScreen = true
            event = { name: "willExit", direction: m.direction, index: comp.index }
            comp.listEvent = event
            events.push(event)
          end if
        end if 
      end for
    end if

    for each delegate in m.delegates
      delegate.listEvents = events
    end for
  end function

  function getComoponentsInViewPort(startOffset)
    compStates = {}

    sStart = m.screenRect.translation[m.axes] + startOffset
    sEnd = sStart + m.screenRect.size[m.axes]

    for each comp in m.renderedComponents
      cRect = m.rects[comp.index]
      cStart = cRect.translation[m.axes]
      cEnd = cStart + cRect.size[m.axes]
      if (cStart >= sStart and cStart <= sEnd) or (cEnd >= sStart and cEnd <= sEnd)
        compStates[comp.id] = true
      else 
        compStates[comp.id] = false
      end if
      ' m.logInfo(compStates[comp.id], "sStart", sStart, "sEnd", sENd, "cStart", cStart, "cEnd", cENd) 
    end for

    return compStates
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ visibility state management
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function updateRenderedComponents()

    'TODO make these settings
    beforeCount = 5
    afterCount = 10

    ' ? "new Index" ; newIndex; " direction "; direction
    if m.direction < 0
      numberOfItemsToShowBefore = beforeCount
      numberOfItemsToShowAfter = afterCount
    else
      numberOfItemsToShowBefore = beforeCount
      numberOfItemsToShowAfter = afterCount
    end if

    m.updateComponentScreenStates(numberOfItemsToShowBefore, numberOfItemsToShowAfter)
  end function

  function updateComponentScreenStates(numberOfItemsToShowBefore = 1, numberOfItemsToShowAfter = 3) as void
    ' m.logMethod("updateComponentScreenStates newIndex", newIndex, "old", oldIndex)
    screenStateMap = {}

    if m.numberOfItems = 0
      return 
    end if

    m.updateScreenStateMap(screenStateMap, 0, m.numberOfItems, m.componentBufferMode)
    m.updateScreenStateMap(screenStateMap, m.index - numberOfItemsToShowBefore, m.index + numberOfItemsToShowAfter, "onScreen")
    m.renderedComponents = []
    ' ? "updating screenStateMap: " ; formatJson(screenStateMap)
    for each id in screenStateMap
      component = m.components[id.toInt()]

      if component <> invalid
        component.screenState = screenStateMap[id]
        if component.screenState = "onScreen"
          m.renderedComponents.push(component)
        end if
      else
        ' ? "ERROR could not find visible component for "; id
      end if
    end for

    m.lastStates = screenStateMap
  end function

  function updateScreenStateMap(screenStateMap, startIndex, endIndex, state)
    for i = startIndex to endIndex

      if i >= 0 and i < m.rects.count()
        component = m.components[i]

        if component <> invalid
          screenStateMap[component.id] = state
        end if
      end if
    end for
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ focus management
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ focus progres
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  ' /**
  '  * @member updateItemFocuses
  '  * @memberof module:nameOfClass
  '  * @instance
  '  * @function
  '  * @description description
  '  * @param {paramType} paramDescription
  '  * @returns {returnType} returnDescription
  '  */

  function updateItemFocuses()
    if m.direction = 1
    else
    end if
    sPos = m.container.translation[m.axes]
  end function

  function updateItemFocus(index)
    m.logMethod("updateItemFocus", index)
    m.focusedItem = m.items[index]

    if m.focusedItem <> invalid
      m.focusedIndex = index

      'this shoudl be enough to ge the machinery going
      m.focusedItem.isFocused = m.focusedItem.isFocusable


      ' if m.focusedItem.content <> invalid and m.focusedItem.subType() = "HorizontalRow"
      '   focusedItem = m.content.getChild(m.focusedItem.itemFocused)

      '   if focusedItem <> invalid
      '     m._focusedRenderer = m.cellTracker@.getCellForContentId(focusedItem.id)
      '   else
      '     m._focusedRenderer = invalid
      '   end if
      '   m.logWarn("focusing on list ", m.focusedItem.content.title)
      '   m.focusedItem.setFocus(true)

      ' end if
    else
      m.rowFocused = -1
    end if

    m.updateComponentScreenStates(0, m.index)
  end function

end class
