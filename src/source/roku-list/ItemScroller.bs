import "pkg:/source/roku_modules/mc/Tasks.brs"

class ItemScroller

  public itemRects = []
  public items = []
  public index = 0
  public focusedIndex = 0
  public nextIndex = 0
  public targetIndex = 0
  public group = invalid
  public direction = 0
  public axes = 0 'x = 0, y =1
  public minPos = 0
  public maxPos = 1080
  public animSpeed = 0.3
  public regularAnimSpeed = 0.3
  public fastAnimSpeed = 2
  public rowHidingMode = "hidden"

  function new(viewManager, axes, minPos, maxPos, moveAnimation, moveAnimationInterpolator)
    m.viewManager = viewManager
    m.group = m.viewManager.group
    m.axes = axes
    m.minPos = minPos
    m.maxPos = maxPos
    m.moveAnimation = moveAnimation
    m.moveAnimationInterpolator = moveAnimationInterpolator
    m.observeNodeField = mc_Tasks_observeNodeField
    m.observeNodeField(moveAnimationInterpolator, "fraction", m.onAnimationFractionChange, "value", false, m)
  end function

  public function updateItems()
    m.items = m.viewManager.visibleItems ' content items 
    m.itemRects = m.viewManager.itemRects ' calculated views for the items
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ collection movement
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function move(offset, animated = true, screenPos = invalid, fast = false)
    index = m.index + offset

    if offset > 0
      direction = 1
    else 
      direction = -1
    end if

    index = m.getValidTargetIndex(index, direction)

    if m.focusedItem <> invalid
      m.itemScroller.moveToIndex(index, screenPos, animated, fast)
      m.rowsGroup.translation = [0, - m.focusedItem.translation[1]]
    end if
  end function

  function getValidTargetIndex(index, direction)
    if index < 0
      return 0
    end if

    if index > m.itemRects.count() - 1
      return m.getValidTargetIndex(m.itemRects.count() - 1, -1)
    end if

    'ensure we dont' move to a non-focusable rowlist
    itemRect = m.itemRects[index]
    itemRect = m.items[index]
    while itemRect <> invalid and not itemRect.isFocusable and index < m.itemRects.count() - 1 and index > -1
      index += direction
      itemRect = m.itemRects[index]
    end while

    return index
  end function

  function moveToIndex(index, screenPos = invalid, animated = true, fast = false)

    itemRect = m.itemRects[index]
    if itemRect = invalid
      return false
    end if

    if fast
      m.animSpeed = m.regularAnimSpeed / m.fastAnimSpeed
    else 
      m.animSpeed = m.regularAnimSpeed
    end if

    m.targetIndex = index
    if m.targetIndex > m.index
      m.direction = 1
    else
      m.direction = -1
    end if

    screenPos = m.getScreenPositionForItem(itemRect, m.direction)
    targetPos = m.getOffsetForScreenPosition(itemRect, screenPos)
    ? " POS " ; targetPos ; " dir " ; m.direction ; " sp " ; screenPos ; " it " ; itemRect.translation[m.axes]
    m.nextIndex = m.index + m.direction
    'TODO count visible rows between oldIndex and newIndex
    steps = abs(m.index - index)
    if steps = 0
      steps = 1
    end if

    if m.moveAnimation.state = "play"
      m.moveAnimation.control = "pause"
    end if
    if m.axes = 0
      x = - targetPos
      y = m.group.translation[1]
    else
      x = m.group.translation[0]
      y = - targetPos
    end if

    m.moveAnimationInterpolator.keyValue = [m.group.translation, [x, y]]
    m.moveAnimation.duration = steps * m.animSpeed

    if m.moveAnimation.state = "pause"
      m.moveAnimation.control = "resume"
    else
      m.moveAnimation.control = "start"
    end if

  end function

  function finishAnimating()
    ? "stop ci " ; m.index ; " ni " ; m.nextIndex
    if m.direction = -1
      nextIndex = m.nextIndex + 1
    else
      nextIndex = m.nextIndex
    end if
    m.moveToIndex(nextIndex, invalid, true, m.fastAnimSpeed)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ itemRect positions
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function getScreenPositionForItem(itemRect, direction = 0, screenPos = invalid)
    if itemRect <> invalid
      if screenPos <> invalid
        return screenPos
      else if itemRect.screenPos <> invalid
        return itemRect.screenPos
      else if m.direction = -1
        return m.minPos
        'TODO this logic is broken
      else if m.direction = 1
        return m.minPos ' fixed focus
        ' return m.maxPos - itemRect.width
      end if
    end if
    return m.minPos
  end function

  function getOffsetForScreenPosition(itemRect, screenPos)
    if itemRect <> invalid
      return itemRect.translation[m.axes] + screenPos
    else
      return m.minPos
    end if
  end function

  function getIndexAtPosition(position, direction)
    for i = 0 to m.itemRects.count() - 1
      itemRect = m.itemRects[i]
      screenPos = m.getScreenPositionForItem(itemRect, direction)
      itemPos = m.getOffsetForScreenPosition(itemRect, screenPos)
      ' ? "i "; i ; " pos "; abs(position) ; " ip " ; itemPos ; " sp " ; screenPos
      if itemPos > abs(position)
        return i - 1
      end if
    end for

    return -1
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ animation callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onAnimationFractionChange(fraction)
    ' m.logInfo("onAnimationFractionChange", fraction)
    position = m.group.translation[m.axes]
    index = m.getIndexAtPosition(position)

    if fraction = 1
      if index = -1
        index = 0
      end if
      ' updateItemFocus(index)
    else
      ' m.logInfo(">>>", y, index, m.top.index)
      if index <> -1 and index <> m.top.index and ((index mod 10) = 0 or index < 10 or index < m.content.getchildCount() - 10)
        m.updateItemStates(m.direction, index)
      end if
      ' nextIndex = getListAtY(y - 1400)
      'TODO - actually run this propertly
      m.itemRects[nextIndex].isOnScreen = true
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ visibility state management
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function updateItemStates(direction, newIndex, beforeCount = 5, afterCount = 10)
    ' ? "new Index" ; newIndex; " direction "; direction
    if direction < 0
      numberOfItemsToShowBefore = beforeCount
      numberOfItemsToShowAfter = afterCount
    else
      numberOfItemsToShowBefore = beforeCount
      numberOfItemsToShowAfter = afterCount
    end if
    m.updateItemVisibilities(newIndex, m.index, numberOfItemsToShowBefore, numberOfItemsToShowAfter)
  end function

  function updateItemVisibilities(newIndex, oldIndex, numberOfItemsToShowBefore = 1, numberOfItemsToShowAfter = 3) as void
    ' m.logMethod("updateItemVisibilities newIndex", newIndex, "old", oldIndex)
    states = {}
    if m.content = invalid or newIndex = oldIndex
      return 
    end if

    m.setListStateMap(states, 0, m.content.getChildCount(), m.rowHidingMode)
    m.setListStateMap(states, newIndex - numberOfItemsToShowBefore, newIndex + numberOfItemsToShowAfter, "partial")

    ' ? "updating states: " ; formatJson(states)
    for each rowId in states
      list = m.itemRects[rowId.toInt()]
      if list <> invalid and list.hasField("viewState")
        list.viewState = states[rowId]
      else
        ' ? "ERROR could not find visible list for "; rowId
      end if
    end for

    m.lastStates = states
  end function

  function setListStateMap(states, startIndex, endIndex, state)
    for i = startIndex to endIndex

      if i >= 0 and i < m.itemRects.count()
        row = m.itemRects[i]

        if row <> invalid
          states[row.id] = state
        end if
      end if
    end for
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ focus management
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function updateItemFocus(index)
    m.logMethod("updateItemFocus", index)
    m.focusedItem = m.items[index]

    if m.focusedItem <> invalid
      m.focusedIndex = index

      'this shoudl be enough to ge the machinery going
      m.focusedItem.isFocused = m.focusedItem.isFocusable


      ' if m.focusedItem.content <> invalid and m.focusedItem.subType() = "HorizontalRow"
      '   focusedItem = m.content.getChild(m.focusedItem.itemFocused)

      '   if focusedItem <> invalid
      '     m.top._focusedRenderer = m.cellTracker@.getCellForContentId(focusedItem.id)
      '   else
      '     m.top._focusedRenderer = invalid
      '   end if
      '   m.logWarn("focusing on list ", m.focusedItem.content.title)
      '   m.focusedItem.setFocus(true)

      ' end if
    else
      m.top.rowFocused = -1
    end if

    m.itemScroller.updateItemStates(0, m.index)
  end function

end class
