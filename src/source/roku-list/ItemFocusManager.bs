import "pkg:/source/roku-list/BaseClass.bs"

class ItemFocusManager extends BaseClass

  public owner = invalid
  public component = 0
  public index = 0
  public indexPosition = 0
  public nextIndex = 0
  public nextPosition = 0
  public nextComponent = 0
  public direction = 0
  public didStart = false
  public didFinish = false

  function new(itemScroller, moveAnimation, moveAnimationInterpolator)
    super("ItemFocusManager")
    m.itemScroller = itemScroller
    m.viewManager = itemScroller.viewManager
    m.container = m.viewManager.container
    m.delegate = m.viewManager.owner
    m.moveAnimation = moveAnimation
    m.moveAnimationInterpolator = moveAnimationInterpolator
    m.observeNodeField(moveAnimationInterpolator, "fraction", m.onAnimationFractionChange, "value", false, m)
    owner = m.viewManager.owner
    m.delegates = [owner]

    if owner.delegate <> invalid
      m.delegates.push(owner.delegate)
    end if

  end function


  function setFocusPosition(index, indexPosition, nextIndex, nextPosition, direction)
    m.index = index
    m.indexPosition = indexPosition
    m.nextIndex = nextIndex
    m.nextIndexPosition = nextPosition
    m.direction = direction
    m.component = m.viewManager.getRenderer(m.index)
    m.nextComponent = m.viewManager.getRenderer(m.nextIndex)
    m.onFocusUpdate(0)
    m.didStart = false
    m.didFinish = false
  end function

  function onFocusAnimationUpdate(fraction)
    m.onFocusUpdate(fraction)
  end function

  function onContainerPositionChange(offset)
    fraction = (offset - m.indexPosition) / (m.nextIndexPosition - m.indexPosition)
    m.onFocusUpdate(abs(fraction))
  end function

  function onFocusUpdate(fraction) as void
    if fraction = 0 
      if m.didStart
        return
      end if
      state = "onWillGainFocus"
      nextState = "onWillLoseFocus"
    else if fraction = 1
      if m.didFinish
        return
      end if
      state = "onDidGainFocus"
      nextState = "onDidLoseFocus"
    else
      state = "onGainingFocus"
      nextState = "onLosingFocus"
    end if

    event = {
      direction: m.direction
      fraction: fraction
      state: state
      index: m.index
    }
    nextEvent = {
      direction: m.direction
      fraction: fraction
      state: nextState
      index: m.nextIndex
    }

    'let components know, so they can react
    m.component.focusEvent = event
    m.nextComponent.focusEvent = nextEvent

    for each delegate in m.delegates
      delegate.focusEvent = event
      delegate.focusEvent = nextEvent
    end for
  end function

end class