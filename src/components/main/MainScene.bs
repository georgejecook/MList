import "pkg:/source/rLog/rLogMixin.brs" 
import "pkg:/source/maestro/ioc/IOCMixin.bs" 
import "pkg:/components/maestro/view/mixin/FocusMixin.bs" 

function Init() as void
  CreateObject("roSGNode", "TrackerTask")
  m.top._global = m.global
  m.top.rLog = initializeRlog(true, false)
  m.top.rLog.logLevel = 5
  registerLogger("MainScene")
  MIOC.init()
  initializeFocusManager(m.global)
  logInfo("init")
end function

' /**
'  * @member begin
'  * @memberof module:MainScene
'  * @instance
'  * @description This would be called when all initial data is loaded. The app would show a loading spinner and loading background until this point
'  * @param {paramType} paramDescription
'  * @returns {returnType} returnDescription
'  */
function begin(args = invalid)
  logInfo("begin")
  MIOC.setInstance("launchArgs", args)
  logInfo("starting the bootstrap task to orchestrate our app init/loading tasks")
  ' my apps have a task here that manages the various app initialization activities
  ' m.bootstrapSequence = crateObject("roSGNode", "bootstrapTasks")
  ' m.loadingSequence.observeField("isComplete", "onIsBootstrapTasksComplete")
  ' let's just pretend it did it for now
  onIsBootstrapTasksComplete()
end function

function onIsBootstrapTasksComplete()
  logInfo("boot strap is complete - showing main screen")
  
  m.top.appController = createObject("roSGNode", "AppController")
  MIOC.setInstance("appController", m.top.appController)
  m.top.appendChild(m.top.appController)
  setFocus(m.top.appController)
end function
