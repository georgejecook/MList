
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function Init()
  log_registerLogger("AppController")
  m.logInfo("in appcontroller init")
  mv_initializeFocusManager(m.global)

  m.cellProvider = createObject("roSGNode", "CellProvider") 
  m.global.addFields({ "cellProvider": m.cellProvider })

  m.cellTracker = createObject("roSGNode", "CellTracker") 
  m.global.addFields({ "cellTracker": m.cellTracker })
  m.top.addFields({ "_global": m.global })

  m.cellTracker.observeField("numberOfCellsInUse", "onInfoChange")
  m.cellTracker.observeField("numberOfCells", "onInfoChange")
  m.cellProvider.observeField("numberOfCellsInUse", "onInfoChange")
  m.cellProvider.observeField("numberOfCells", "onInfoChange")

  m.infoLabel = m.top.findNode("infoLabel")
  reset() 
  m.navController = m.top.findNode("navController")
  m.navController@._initialize()
  ' m.rootScreen = createObject("roSGNode", "TestScreen")
  m.rootScreen = createObject("roSGNode", "ListScreen")
  m.rootScreen.isRoot = true
  m.navController@.push(m.rootScreen)
  mv_setFocus(m.rootScreen)
end function


function onInfoChange()
  m.infoLabel.text = " Light cells (" + str(m.cellTracker.numberOfCellsInUse) + "/" + str(m.cellTracker.numberOfCells) + ") - Real cells (" + str(m.cellProvider.numberOfCellsInUse) + "/" + str(m.cellProvider.numberOfCells) + ")"
end function

function onGainedFocus(isSelfFocused)
  if isSelfFocused
    mv_setFocus(m.navController)
    m.logInfo("Focused on main content")
  end if
end function

function reset()
  m.cellProvider.callFunc("reset", invalid)
  m.cellTracker.callFunc("reset", invalid)
  prebakeCells()
end function

function prebakeCells()
  ? "adding prebaked cells"

  m.cellProvider.callfunc("addPreBakedCells", m.top._prebakeImageCells, "ImageCell")
  m.cellProvider.callfunc("addPreBakedCells", m.top._prebakeCellOnes, "SimpleCell")
  m.cellProvider.callfunc("addPreBakedCells", m.top._prebakeCellTwos, "SimpleCell2")
  m.cellProvider.callfunc("addPreBakedCells", m.top._prebakeCellComplex, "ComplexCell")

  ? "finished adding prebaked cells"
end function
