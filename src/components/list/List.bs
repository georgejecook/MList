import "pkg:/source/roku-list/ListItemScroller.bs"
import "pkg:/source/roku-list/ListItemViewManager.bs"
import "pkg:/source/roku_modules/mc/Tasks.brs"
import "pkg:/source/roku-list/ListMixin.bs"

function init()
  log_registerLogger("List")
  m.top.rowSettings = ListMixin.createRowSettings()
  m.top.focusSettings = ListMixin.createFocusSettings()

  m.rowsGroup = m.top.findNode("rowsGroup") 
  m.moveAnimationInterpolator = m.top.findNode("moveAnimationInterpolator") 
  m.moveAnimation = m.top.findNode("moveAnimation")
  m.viewManager = new ListItemViewManager(m.top, m.rowsGroup)
  m.itemScroller = new ListItemScroller(m.viewManager, 1, 0, 1080, m.moveAnimation, m.moveAnimationInterpolator)

  ' m.top.clippingRect = [0,0,1920,550]
  ' m.overlay = m.top.findNode("overlay") 
  ' m.focusTimer = m.top.findNode("focusTimer") 
  m.cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.content = invalid
  ' m.lastStates = {}
end function

function resetState()
  m.viewManager.setContent(m.top.content)
  m.itemScroller.updateItemStates(0, 0, 5, 10)
  m.itemScroller.move(0)
end function

function onSetInitialTimerFire()
  m.logMethod(">>onSetInitialTimerFire")
  ' m.viewManager.layoutLists()
end function

function onContentChange()
  if m.content = invalid or not m.content.isSameNode(m.top.content)
    m.content = m.top.content
    resetState()
  end if
end function

function onAnimateToRowChange()
  if m.content <> invalid
    ' animateToIndex(m.top.rowFocused, m.top.animateToRow, m.top.fastAnimationSpeed)
    m.itemScroller.animateToIndex(m.top.animateToRow, m.top.fastAnimationSpeed)
  end if
end function

' function addListListeners()
'   for each list in m.visibleLists
'     list.observeField("itemFocused", "itemFocusedChanged")
'     list.observeField("itemUnfocused", "itemUnfocusedChanged")
'     list.observeField("itemSelected", "itemSelectedChanged")
'     ' list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
'     list.observeField("isHidden", "onListIsHiddenChange")
'     list.observeField("isFocusable", "onListIsFocuableChange")
'     list.observeField("currTarget", "onCurrTargetChange")
'   end for
' end function

' function itemFocusedChanged()
'   m.top.itemFocused = m.currentList.itemFocused
' end function

' function itemUnfocusedChanged()
'   m.top.itemUnfocused = m.currentList.itemUnfocused
' end function

' function itemSelectedChanged()
'   m.top.itemSelected = m.currentList.itemSelected
' end function

' function currFocusItemIndexChanged() 
'   ' ? "currFocusItemIndexChanged " ; 
'   list = m.visibleLists[m.top.rowFocused]
'   if list <> invalid and list.subType() = "HorizontalRow"
'     index = list.currFocusItemIndex
'     m.top.currFocusItemIndex = index
'     rect = getBoundsForIndex(m.top.rowFocused, int(index))

'     if rect <> invalid
'       ' ? " rect is "; formatJson(rect)
'       m.overlay.width = rect.height
'       m.overlay.height = rect.width
'       yOffset = list.translation[1] + m.rowsGroup.translation[1]

'       'floating
'       ' if m.list.content.yOffset <> invalid
'       '   yOffset -= m.currentList.content.yOffset 
'       ' end if
'       m.overlay.translation = [rect.x, rect.y + yOffset]
'     else
'       ? " no rect for focused item"
'     end if
'   end if
' end function

' function onListIsHiddenChange(evt)
'   m.viewManager.layoutLists()
' end function

' function onListIsFocuableChange(evt)
'   'TODO update focus if we're currently focused on the list
' end function

' function onCurrTargetChange(evt)
'   currTarget = m.currentList.currTarget
'   ' ? "currTargetSet"; formatJson(currTarget)
' end function

' function getBoundsForIndex(rowIndex, index)
'   rect = invalid
'   list = m.visibleLists[rowIndex]
'   if list <> invalid and list.subType() = "HorizontalRow"
'     set = list.currTargetSet
'     ' ? " set.focusIndex " ; set.focusIndex + list.focusIndexOffset
'     if set <> invalid
'       return set[index]
'     end if
'   end if

'   if rect <> invalid
'     ' ? "INDEX" ; index ; " " ; formatJson(dynamicCell.boundingRect()); "  " ; formatJson(dynamicCell.localBoundingRect()); "  " ; formatJson(dynamicCell.sceneBoundingRect()); "  " 
'     return rect
'   else
'     ? "could not find target "
'     return {
'       width: 0
'       height: 0
'       translation: [0, 0]
'     }
'   end if

' end function

' function isHiddenChange()
'   ? "ishiddenchange"
'   if m.top.isHidden
'     for each rowId in m.laststates
'       list = m.visibleLists[rowId.toInt()]
'       if list <> invalid
'         list.viewState = "hidden"
'       else
'         ? "ERROR could not find visible list for "; rowId
'       end if
'     end for
'   else
'     for each rowId in m.laststates
'       list = m.visibleLists[rowId.toInt()]
'       if list <> invalid
'         list.viewState = m.laststates[rowId]
'       else
'         ? "ERROR could not find visible list for "; rowId
'       end if
'     end for

'   end if

' end function

' function getFocusedBounds()
'   return getBoundsForIndex(m.top.rowFocused, int(m.currentList.currFocusItemIndex))
' end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ KeyPress
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyPressUp() as boolean
  m.logMethod("onKeyPressUp")
  m.itemScroller.move(-1)
  return true
end function

function onKeyPressDown() as boolean
  m.logMethod("onKeyPressDown")
  m.itemScroller.move(1)
  return true
end function

function getLongPressIntervalForKey(key) as float
  m.logMethod("getLongPressIntervalForKey", key)
  if key = "up" or key = "down"
    return 0.5
  else
    return 0
  end if
end function

function onLongPressStart(key) as boolean
  m.logMethod(">>>>onLongPressStart", key)

  if key = "up" or key = "down"
    m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
    if key = "up"
      targetIndex = 0 
    else
      targetIndex = m.visibleLists.count() - 1
    end if

    m.itemScroller.animateToIndex(m.top.rowFocused, targetIndex)
    return true
  end if

  return false
end function

function onLongPressFinish(key) as boolean
  if key = "up" or key = "down"
    'fixed focus 
    m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
    m.itemScroller.finishAnimating()
    return true
  end if

  return false
end function
