import "pkg:/source/roku-list/ListItemScroller.bs"
import "pkg:/source/roku-list/ListItemViewManager.bs"
import "pkg:/source/roku-list/ItemFocusManager.bs"
import "pkg:/source/roku_modules/mc/Tasks.brs"
import "pkg:/source/roku-list/ListMixin.bs"

function init()
  log_registerLogger("List")
  m.top.observeField("content", "onContentChange")
  m.top.observeField("animateToRow", "onAnimateToRowChange")
  m.top.cellEvents = createEventsBroker("cells")
  m.top.rowEvents = createEventsBroker("rows")
  m.rowsGroup = m.top.findNode("rowsGroup") 
  m.moveAnimationInterpolator = m.top.findNode("moveAnimationInterpolator") 
  m.moveAnimation = m.top.findNode("moveAnimation")

  m.top.focusMoveAnimationInterpolator = m.top.findNode("focusMoveAnimationInterpolator") 
  m.top.focusMoveAnimation = m.top.findNode("focusMoveAnimation")
  m.viewManager = new ListItemViewManager(m.top, m.rowsGroup)
  m.focusManager = new ItemFocusManager(m.viewManager, m.top.focusMoveAnimation, m.top.focusMoveAnimationInterpolator, m.top.rowEvents)
  m.itemScroller = new ListItemScroller(m.viewManager, m.moveAnimation, m.moveAnimationInterpolator)
  m.itemScroller.focusManager = m.focusManager

  ' m.top.clippingRect = [0,0,1920,550]
  ' m.overlay = m.top.findNode("overlay") 
  ' m.focusTimer = m.top.findNode("focusTimer") 
  m.cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.content = invalid
end function

function createEventsBroker(id)
  node = createObject("roSGNode", "Node")
  node.id = id
  node.addFields({ "listEvent": {}, "listEvents": [] })
  return node
end function

function resetState()
  m.viewManager.setContent(m.top.content)
  m.itemScroller.reset()
end function

function onContentChange()
  if m.content = invalid or not m.content.isSameNode(m.top.content)
    m.content = m.top.content
  
    resetState()
  end if
end function

function onAnimateToRowChange()
  if m.content <> invalid
    ' animateToIndex(m.top.rowFocused, m.top.animateToRow, m.top.fastAnimationSpeed)
    m.itemScroller.moveToIndex(m.top.animateToRow)
  end if
end function

function getRowRenderer(index)
  return m.viewManager.getRenderer(index)
end function

function getCellRenderer(rowIndex, cellIndex)
  row = getRowRenderer(rowIndex)

  if row <> invalid
    return row@.getRenderer(cellIndex)
  end if

  return invalid
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ KeyPress
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyPressUp() as boolean
  m.logMethod("onKeyPressUp")
  if (m.top.isScrolling)
    m.itemScroller.move(-2)
  else
    m.itemScroller.move(-1)
  end if
  return true
end function

function onKeyPressDown() as boolean
  m.logMethod("onKeyPressDown")
  if (m.top.isScrolling)
    m.itemScroller.move(2)
  else
    m.itemScroller.move(1)
  end if
  return true
end function

function getLongPressIntervalForKey(key) as float
  m.logMethod("getLongPressIntervalForKey", key)
  if key = "up" or key = "down"
    return 0.2
  else
    return 0
  end if
end function

function onLongPressStart(key) as boolean
  m.logMethod(">>>>onLongPressStart", key)

  if key = "up" or key = "down"
    m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
    if key = "up"
      m.itemScroller.moveToEnd(-1)
    else
      m.itemScroller.moveToEnd(1)
    end if

    return true
  end if

  return false
end function

function onLongPressFinish(key) as boolean
  if key = "up" or key = "down"
    m.logVerbose("long press finished on key", key, "going to animate to final scroll position")
    m.itemScroller.finishAnimating()
    return true
  end if

  return false
end function
