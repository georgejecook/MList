function init()
  m.list = m.top.findNode("list")
  m.header = m.top.findNode("header")
  m.cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.previousContent = invalid
  m.previousViewState = ""
end function

function onContentIsHiddenChange()
  m.top.isHidden = m.top.content.isHidden = true
end function

function onContentChange()
  if m.previousContent = invalid or not m.previousContent.isSameNode(m.top.content)
    toggleContentListener(false)
    m.previousContent = m.top.content
    if m.top.content.isHidden <> true
      configureHeader()
      configureList(m.list)
      toggleContentListener(true)
      m.list.content = m.top.content 
    else
      m.list.content = invalid
    end if
  end if
end function

function configureHeader()
  if m.top.content <> invalid
    m.header.text = m.top.content.title
  else
    m.header.text = ""
  end if
end function

function toggleContentListener(isActive)
  if m.top.content <> invalid
    if isActive
      m.top.content.observeField("isHidden", "onContentIsHiddenChange")
    else
      m.top.content.unObserveField("isHidden")
    end if
  end if
end function

function configureList(list)
  list.itemComponentName = "DynamicCell"
  list.advanceKey = "right" 
  list.reverseKey = "left"
  
  ? "configuring list " ; m.top.focusType
  if m.top.focusType = "fixed"
    configureListFixed(list)
  else if m.top.focusType = "focusWrap"
    configureListFocusWrap(list)
  else if m.top.focusType = "floating"
    configureListFloating(list)
  else if m.top.focusType = "zoom"
    configureListZoom(list)
  else if m.top.focusType = "custom"
    configureListCustom(list)
  else
    ? " ERROR no valid list type; and no row override, dropping back to fixed"
    configureListFixed(list)
    
  end if
end function

function createHorizontalRects(rects, sx, cw, ch, csw, csh, numberOfCols)
  w = sx
  y = csh
  for i = 0 to numberOfCols
    rects.push({ x: w, y: y, width: cw, height: ch })
    w += cw + csw
  end for
end function

function configureListFixed(list)
  ? ">> configuring list"
  focusedTargetSet = createObject("roSGNode", "TargetSet")
  list.focusedTargetSet = focusedTargetSet
  
  cw = m.top.cellSize[0]
  ch = m.top.cellSize[1]
  csw = m.top.cellSpacing[0]
  csh = m.top.cellSpacing[1]
  rects = []
  rects.push({ x: - cw, y: 0, width: cw, height: ch })
  createHorizontalRects(rects, 0, cw, ch, csw, csh, m.top.numCols)
  
  focusedTargetSet.color = "0x00202020AA"
  focusedTargetSet.targetRects = rects
  
  focusedTargetSet.color = "0x00202020AA"
  
  unfocusedTargetSet = createObject("roSGNode", "TargetSet")
  list.unfocusedTargetSet = unfocusedtargetSet
  
  rects = []
  rects.push({ x: - cw, y: 0, width: cw, height: ch })
  createHorizontalRects(rects, 0, cw, ch, csw, csh, m.top.numCols)
  
  unfocusedTargetSet.targetRects = rects
  unfocusedTargetSet.color = "0x00202020AA"
  
  list.targetSet = focusedTargetSet
  m.top.defaultTargetSetFocusIndex = 1
  m.top.focusIndexOffset = 2
end function


function configureListFloating(list)
  'FIXME - this needs an overhaul for laying out
  ? "configureListFloating"
  cw = m.top.cellSize[0]
  ch = m.top.cellSize[1]
  csw = m.top.cellSpacing[0]
  csh = m.top.cellSpacing[1]
  numCols = 1920 / (cw + csw)
  focusedTargetSets = []
  
  for i = 0 to numCols
    focusedTargetSet = createObject("roSGNode", "TargetSet")
    focusedTargetSets.push(focusedTargetSet)
    rects = []
    rects.push({ x: - cw * ((numCols - i) + 1), y: 0, width: cw, height: ch })
    createHorizontalRects(rects, - cw * (numCols - i), cw, ch, csw, csh, numCols)
    focusedTargetSet.targetRects = rects
    focusedTargetSet.focusIndex = numCols + i
    focusedTargetSet.color = "0x00202020AA"
  end for
  
  list.focusedTargetSet = focusedTargetSets
  
  unfocusedTargetSet = createObject("roSGNode", "TargetSet")
  list.unfocusedTargetSet = unfocusedtargetSet
  
  rects = []
  rects.push({ x: - cw * ((numCols / 2) + 1), y: 0, width: cw, height: ch })
  createHorizontalRects(rects, - cw * 2, cw, ch, csw, csh, numCols)
  unfocusedTargetSet.targetRects = rects
  unfocusedTargetSet.focusIndex = numCols / 2 ' should not matter?
  unfocusedTargetSet.color = "0x00202020AA"
  
  list.targetSet = list.focusedTargetSet[0]
end function


function configureListZoom(list)
  ? "configureListZoom"
  focusedTargetSet = createObject("roSGNode", "TargetSet")
  
  list.focusedTargetSet = focusedTargetSet
  
  cw = m.top.cellSize[0]
  ch = m.top.cellSize[1]
  rects = []
  sw = m.top.cellSpacing[0]
  w = 0
  'TODO calculate
  ' for i = 0 to m.top.numCols
  '   rects.push({ x: w, y: 0, width: cw, height: ch })
  '   w += cw + sw
  ' end for
  
  rects = [
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -14, y: -64, width: 100, height: 128 },
    { x: 106, y: -90, width: 144, height: 180 },
    { x: 270, y: -125, width: 200, height: 250 },
    { x: 490, y: -188, width: 300, height: 376 }, ' focus
    { x: 810, y: -125, width: 200, height: 250 },
    { x: 1030, y: -90, width: 144, height: 180 },
    { x: 1194, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 }
  ]
  focusedTargetSet.rects = rects
  focusedTargetSet.color = "0x00202020AA"
  
  rects = []
  sw = m.top.cellSpacing[0]
  w = 0
  
  'TODO calculate
  ' for i = 0 to m.top.numCols
  '   rects.push({ x: w, y: 0, width: cw, height: ch })
  '   w += cw + sw
  ' end for
  rects = [
    { x: -130, y: -64, width: 100, height: 128 },
    { x: -10, y: -64, width: 100, height: 128 },
    { x: 110, y: -64, width: 100, height: 128 },
    { x: 230, y: -64, width: 100, height: 128 },
    { x: 350, y: -64, width: 100, height: 128 },
    { x: 470, y: -64, width: 100, height: 128 },
    { x: 590, y: -64, width: 100, height: 128 }, ' focus
    { x: 710, y: -64, width: 100, height: 128 },
    { x: 830, y: -64, width: 100, height: 128 },
    { x: 950, y: -64, width: 100, height: 128 },
    { x: 1070, y: -64, width: 100, height: 128 },
    { x: 1190, y: -64, width: 100, height: 128 },
    { x: 1310, y: -64, width: 100, height: 128 }
  ]
  
  unfocusedTargetSet = createObject("roSGNode", "TargetSet")
  list.unfocusedTargetSet = unfocusedTargetSet
  
  unfocusedTargetSet.targetRects = rects
  unfocusedTargetSet.color = "0x00202020AA"
  
  list.targetSet = list.focusedTargetSet
  m.top.defaultTargetSetFocusIndex = 6
end function

function configureListCustom(list)
end function


function configureListFocusWrap(list)
  ? "configureListFocusWrap"
  focusedTargetSet1 = createObject("roSGNode", "TargetSet")
  focusedTargetSet2 = createObject("roSGNode", "TargetSet")
  focusedTargetSet3 = createObject("roSGNode", "TargetSet")
  focusedTargetSet4 = createObject("roSGNode", "TargetSet")
  focusedTargetSet5 = createObject("roSGNode", "TargetSet")
  list.focusedTargetSet = [focusedTargetSet1, focusedTargetSet2, focusedTargetSet3, focusedTargetSet4, focusedTargetSet5]
  
  focusedTargetSet1.targetRects = [
    { x: -192, y: -64, width: 100, height: 128 },
    { x: -192, y: -64, width: 100, height: 128 },
    { x: -192, y: -90, width: 144, height: 180 },
    { x: -192, y: -125, width: 200, height: 250 },
    { x: 28, y: -188, width: 300, height: 376 }, ' focus
    { x: 348, y: -125, width: 200, height: 250 },
    { x: 568, y: -90, width: 144, height: 180 },
    { x: 732, y: -64, width: 100, height: 128 },
    { x: 852, y: -64, width: 100, height: 128 },
    { x: 972, y: -64, width: 100, height: 128 },
    { x: 1092, y: -64, width: 100, height: 128 },
    { x: 1212, y: -64, width: 100, height: 128 },
    { x: 1332, y: -64, width: 100, height: 128 }
  ]
  focusedTargetSet1.focusIndex = 4
  focusedTargetSet1.color = "0x00202020AA"
  
  focusedTargetSet2.targetRects = [
    { x: -164, y: -64, width: 100, height: 128 },
    { x: -164, y: -64, width: 100, height: 128 },
    { x: -164, y: -64, width: 100, height: 128 },
    { x: -164, y: -90, width: 144, height: 180 },
    { x: 0, y: -125, width: 200, height: 250 },
    { x: 220, y: -188, width: 300, height: 376 }, ' focus
    { x: 540, y: -125, width: 200, height: 250 },
    { x: 760, y: -90, width: 144, height: 180 },
    { x: 924, y: -64, width: 100, height: 128 },
    { x: 1044, y: -64, width: 100, height: 128 },
    { x: 1164, y: -64, width: 100, height: 128 },
    { x: 1284, y: -64, width: 100, height: 128 },
    { x: 1404, y: -64, width: 100, height: 128 }
  ]
  focusedTargetSet2.focusIndex = 5
  focusedTargetSet2.color = "0x00202020AA"
  
  focusedTargetSet3.targetRects = [
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -134, y: -64, width: 100, height: 128 },
    { x: -14, y: -64, width: 100, height: 128 },
    { x: 106, y: -90, width: 144, height: 180 },
    { x: 270, y: -125, width: 200, height: 250 },
    { x: 490, y: -188, width: 300, height: 376 }, ' focus
    { x: 810, y: -125, width: 200, height: 250 },
    { x: 1030, y: -90, width: 144, height: 180 },
    { x: 1194, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 },
    { x: 1314, y: -64, width: 100, height: 128 }
  ]
  focusedTargetSet3.focusIndex = 6
  focusedTargetSet3.color = "0x00202020AA"
  
  focusedTargetSet4.targetRects = [
    { x: -204, y: -64, width: 100, height: 128 }
    { x: -204, y: -64, width: 100, height: 128 },
    { x: 16, y: -64, width: 100, height: 128 },
    { x: 136, y: -64, width: 100, height: 128 },
    { x: 256, y: -64, width: 100, height: 128 },
    { x: 376, y: -90, width: 144, height: 180 },
    { x: 540, y: -125, width: 200, height: 250 },
    { x: 760, y: -188, width: 300, height: 376 }, ' focus
    { x: 1080, y: -125, width: 200, height: 250 },
    { x: 1300, y: -90, width: 144, height: 180 },
    { x: 1464, y: -64, width: 100, height: 128 },
    { x: 1584, y: -64, width: 100, height: 128 },
    { x: 1704, y: -64, width: 100, height: 128 },
  ]
  focusedTargetSet4.focusIndex = 7
  focusedTargetSet4.color = "0x00202020AA"
  
  focusedTargetSet5.targetRects = [
    { x: -152, y: -64, width: 100, height: 128 },
    { x: -32, y: -64, width: 100, height: 128 }
    { x: 88, y: -64, width: 100, height: 128 },
    { x: 208, y: -64, width: 100, height: 128 },
    { x: 328, y: -64, width: 100, height: 128 },
    { x: 448, y: -64, width: 100, height: 128 },
    { x: 568, y: -90, width: 144, height: 180 },
    { x: 732, y: -125, width: 200, height: 250 },
    { x: 952, y: -188, width: 300, height: 376 }, ' focus
    { x: 1272, y: -125, width: 200, height: 250 },
    { x: 1272, y: -90, width: 144, height: 180 },
    { x: 1272, y: -64, width: 100, height: 128 },
    { x: 1272, y: -64, width: 100, height: 128 },
  ]
  focusedTargetSet5.focusIndex = 8
  focusedTargetSet5.color = "0x00202020AA"
  
  unfocusedTargetSet = createObject("roSGNode", "TargetSet")
  list.unfocusedTargetSet = unfocusedtargetSet
  
  unfocusedTargetSet.targetRects = [
    { x: -130, y: -64, width: 100, height: 128 },
    { x: -10, y: -64, width: 100, height: 128 },
    { x: 110, y: -64, width: 100, height: 128 },
    { x: 230, y: -64, width: 100, height: 128 },
    { x: 350, y: -64, width: 100, height: 128 },
    { x: 470, y: -64, width: 100, height: 128 },
    { x: 590, y: -64, width: 100, height: 128 }, ' focus
    { x: 710, y: -64, width: 100, height: 128 },
    { x: 830, y: -64, width: 100, height: 128 },
    { x: 950, y: -64, width: 100, height: 128 },
    { x: 1070, y: -64, width: 100, height: 128 },
    { x: 1190, y: -64, width: 100, height: 128 },
    { x: 1310, y: -64, width: 100, height: 128 }
  ]
  unfocusedTargetSet.focusIndex = 6 ' should not matter?
  unfocusedTargetSet.color = "0x00202020AA"
  
  list.targetSet = list.focusedTargetSet[0]
end function

function addListListeners()
  for each list in m.lists
    list.observeField("itemFocused", "itemFocusedChanged")
    list.observeField("itemUnfocused", "itemUnfocusedChanged")
    list.observeField("itemSelected", "itemSelectedChanged")
    list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
  end for
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ flyweight heuristics (i.e. cell reuse)
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onViewStateChange()
  ? "view sate changed" ; m.top.viewState
  ' if m.top.viewState <> m.previousViewState
  m.previousViewState = m.top.viewState
  updateListVisibility(m.top.viewState)
  ' end if
end function

function updateListVisibility(state)
  if m.top.content <> invalid
    ' ? "row updateListVisibility " ; state
    states = {}
    
    if m.top.viewState = "hide" or m.top.viewState = "partial"
      setListStateMap(states, 0 , m.top.content.getChildCount() - 1, "hide")
    end if
    
    if m.top.viewState = "show"
      setListStateMap(states, 0 , m.top.content.getChildCount() - 1, "show")
    else if m.top.viewState = "partial"
      setListStateMap(states, m.list.itemFocused - 5, m.list.itemFocused + 5, "show")
    end if
    
    ' ? "row updateListVisibility " ; formatJson(states)
    toggleCellStates(states)
  end if
end function

function setListStateMap(states, startIndex, endIndex, state)
  for i = startIndex to endIndex
    
    if i > 0 and i < m.top.content.getChildCount() - 1
      states[m.top.content.getChild(i).id] = state
    end if
  end for
end function

function toggleCellStates(states)
  
  for each id in states
    dynamicCell = m.cellTracker.callFunc("getCellForContentId", id)
    if dynamicCell <> invalid
      dynamicCell.viewState = states[id]
    else
      ? " could not find cell for id " ; id
    end if
  end for
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ key handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


function onCurrFocusItemIndexChange()
  if m.top.viewState <> "show"
    m.top.viewState = "show"
    
  end if
end function

function onIsFocusedChange()
  if m.top.isFocused 
    m.list.setFocus(true)
  end if 
end function
