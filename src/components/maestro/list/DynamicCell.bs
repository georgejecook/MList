function init()
  m.cell = invalid
  m.top.cell = invalid
  m.cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.cellTracker.numberOfCells++
  m.top.observeField("viewState", "onViewStateChange")
end function

function itemContentChanged()
  m.cellTracker.callFunc("bindCellToContent", m.top, m.top.itemContent)
  updateCell() 
end function

function updateCell() as void
  if m.top.viewState <> "show"
    return
  end if
  
  if m.cell <> invalid and (m.top.itemContent = invalid or m.cell.subType() <> m.top.itemContent.cellType)
    m.cellProvider.callFunc("releaseCell", m.cell) 
    m.cell = invalid
    m.top.cell = invalid
  end if
  
  if m.cell = invalid
    m.cell = m.cellProvider.callFunc("getCell", m.top.itemContent.cellType)
    m.top.cell = m.cell
    m.top.appendChild(m.cell)
  end if
  
  if m.cell <> invalid
    m.cell.index = m.top.index
    m.cell.itemContent = m.top.itemContent
  end if
  
end function

function onViewStateChange(evt) 
  ? "onViewStateChange"; evt.getData()
  
  if evt.getData() = "show"
    updateCell()
    if m.cell <> invalid 
      m.cell.index = m.top.index
      m.cell.currTarget = m.top.currTarget
      m.cell.currRect = m.top.currRect
      m.cell.focusPercent = m.top.focusPercent
      m.cell.groupHasFocus = m.top.groupHasFocus
    end if
  else if evt.getData() = "hide" and m.cell <> invalid
    m.cellProvider.callFunc("releaseCell", m.cell) 
    m.cell = invalid
    m.top.cell = invalid
  end if
end function

function currTargetChanged()
  if m.cell <> invalid
    m.cell.currTarget = m.top.currTarget
  end if
end function

function currRectChanged()
  if m.cell <> invalid
    m.cell.currRect = m.top.currRect
  end if
end function

function onIndexChanged()
  ? "on index changed" ; m.top.index
end function

function focusPercentChanged()
  if m.cell <> invalid
    m.cell.groupHasFocus = m.top.groupHasFocus
    m.cell.focusPercent = m.top.focusPercent
  end if
end function
