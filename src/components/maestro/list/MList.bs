function init()
  print "in FocusTestScene init"
  m.rowsGroup = m.top.findNode("rowsGroup") 
  m.overlay = m.top.findNode("overlay") 
  m.cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.previousContent = invalid
  m.numberOfRowsToShow = 3
  m.visibleLists = []
  m.hiddenLists = []
  m.lists = []
  resetState()
end function

function resetState()
  m.currentY = 0
  m.focusIndex = 0
  m.listIndex = 0
  m.rowsGroup.removeChildren(m.rowsGroup.getChildren( - 1, 0))
  
  m.lists = []
  
  if m.top.content <> invalid
    for each item in m.top.content.getChildren( - 1, 0)
      list = makeList(item)
      m.lists.push(list)
    end for
  end if
  
  layoutLists()
  addListListeners()
  m.currentList = m.visibleLists[m.focusIndex]
  moveYFocus(0)
end function

function layoutLists()
  m.currentY = 0
  
  m.visibleLists = []
  m.hiddenLists = []
  for each list in m.lists
    list.visible = not list.isHidden
    if list.visible
      list.translation = [0, m.currentY]
      m.currentY += m.top.cellSize[1] + m.top.cellSpacing[1]
      m.visibleLists.push(list)
    else
      m.hiddenLists.push(list)
    end if
  end for
  
end function

function onDebugMChange()
  m.top._m = m
end function

function onContentChange()
  if m.previousContent = invalid or not m.previousContent.isSameNode(m.top.content)
    m.previousContent = m.top.content
    resetState()
  end if
end function

function makeList(rowContent)
  list = m.rowsGroup.createChild("MListRow")
  list.id = str(m.listIndex).trim()
  list.cellSize = m.top.cellSize
  list.cellSpacing = m.top.cellSpacing
  list.numCols = m.top.numCols
  list.unfocusCellScale = m.top.unfocusCellScale
  list.unfocusCount = m.top.unfocusCount
  list.content = rowContent
  
  m.listIndex++
  
  return list
end function

function addListListeners()
  for each list in m.visibleLists
    list.observeField("itemFocused", "itemFocusedChanged")
    list.observeField("itemUnfocused", "itemUnfocusedChanged")
    list.observeField("itemSelected", "itemSelectedChanged")
    list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
    list.observeField("isHidden", "onListIsHiddenChange")
    list.observeField("isFocusable", "onListIsFocuableChange")
    list.observeField("currTarget", "onCurrTargetChange")
  end for
end function

function itemFocusedChanged()
  m.top.itemFocused = m.currentList.itemFocused
end function

function itemUnfocusedChanged()
  m.top.itemUnfocused = m.currentList.itemUnfocused
end function

function itemSelectedChanged()
  m.top.itemSelected = m.currentList.itemSelected
end function

function currFocusItemIndexChanged() 
  ? "currFocusItemIndexChanged " ; 
  index = m.currentList.currFocusItemIndex
  m.top.currFocusItemIndex = index
  rect = getFocusedBounds()
  
  if rect <> invalid
    ? " rect is "; formatJson(rect)
    m.overlay.width = rect.width
    m.overlay.height = rect.height
    m.overlay.translation = [rect.x, rect.y]
  else
    ? " no rect for focused item"
  end if
end function

function onListIsHiddenChange(evt)
  layoutLists()
end function

function onListIsFocuableChange(evt)
  'TODO update focus if we're currently focused on the list
end function

function onCurrTargetChange(evt)
  currTarget = m.currentList.currTarget
  ? "currTargetSet"; formatJson(currTarget)
end function

function onKeyEvent(key as string, press as boolean) as boolean
  handled = false
  if press
    ? "list keypress "; key
    
    if key = "up"
      moveYFocus( - 1)
    end if
    if key = "down"
      moveYFocus(1)
    end if
    
  end if
  return true
end function

function moveYFocus(offset)
  newIndex = m.focusIndex + offset
  
  'TODO - I have no need for vertical wrapping; if someone wants it
  'they are free to submit a pr :)
  if newIndex < 0
    newIndex = 0
  end if
  
  if newIndex > m.visibleLists.count() - 1
    newIndex = m.visibleLists.count() - 1
  end if
  
  direction = newIndex - m.focusIndex
  
  'ensure we dont' move to a non-focusable rowlist
  nextList = m.visibleLists[newIndex]
  while nextList <> invalid and not nextList.isFocusable and newIndex < m.visibleLists.count() - 1 and newIndex > -1
    newIndex += direction
    nextList = m.visibleLists[newIndex]
  end while
  
  ? "new Index" ; newIndex; " direction "; direction
  if direction < 0
    numberOfRowsToShowBefore = 3
    numberOfRowsToShowAfter = 1
  else
    numberOfRowsToShowBefore = 1
    numberOfRowsToShowAfter = 3
  end if
  updateRowVisibilities(newIndex, m.focusIndex, numberOfRowsToShowBefore, numberOfRowsToShowAfter)
  m.focusIndex = newIndex
  m.top.rowFocused = newIndex
  
  currentList = nextList
  
  if currentList <> invalid
    currentList.isFocused = false
  end if
  
  if m.currentList = invalid or not m.currentList.isSameNode(currentList)
    m.currentList = currentList 
    
    if m.currentList <> invalid
      m.rowsGroup.translation = [0, - m.currentList.translation[1]]
      m.currentList.isFocused = m.currentList.isFocusable
      
      if m.currentList.content <> invalid
        focusedItem = m.currentList.content.getChild(m.currentList.itemFocused)
        if focusedItem <> invalid
          m.top._focusedRenderer = m.cellTracker@.getCellForContentId(focusedItem.id)
        else
          m.top._focusedRenderer = invalid
        end if
      end if
      ' m.currentList.setFocus(true)
    end if
  end if
end function

function updateRowVisibilities(newIndex, oldIndex, numberOfRowsToShowBefore = 1, numberOfRowsToShowAfter = 3) as void
  states = {}
  if m.top.content = invalid
    return 
  end if
  
  setListStateMap(states, oldIndex - numberOfRowsToShowBefore, oldIndex + numberOfRowsToShowAfter, "hide")
  setListStateMap(states, newIndex - numberOfRowsToShowBefore, newIndex + numberOfRowsToShowAfter, "partial")
  
  ? "updating states: " ; formatJson(states)
  for each rowId in states
    list = m.visibleLists[rowId.toInt()]
    if list <> invalid
      list.viewState = states[rowId]
    else
      ? "ERROR could not find visible list for "; rowId
    end if
  end for
end function

function setListStateMap(states, startIndex, endIndex, state)
  for i = startIndex to endIndex
    
    if i > 0 and i < m.visibleLists.count() - 1
      row = m.visibleLists[i]
      
      if row <> invalid
        states[row.id] = state
      end if
    end if
  end for
end function


function getBoundsForIndex(index)
  rect = invalid
  if m.currentList <> invalid
    set = m.currentList.currTargetSet
    ? " set.focusIndex " ; set.focusIndex + m.currentList.focusIndexOffset
    if set <> invalid
      return set.targetRects[set.focusIndex + m.currentList.focusIndexOffset]
    end if
  end if
  
  if rect <> invalid
    ' ? "INDEX" ; index ; " " ; formatJson(dynamicCell.boundingRect()); "  " ; formatJson(dynamicCell.localBoundingRect()); "  " ; formatJson(dynamicCell.sceneBoundingRect()); "  " 
    return rect
  else
    ? "could not find target "
    return {
      width: 0
      height: 0
      translation: [0, 0]
    }
  end if
  
end function

function getFocusedBounds(args = invalid)
  return getBoundsForIndex(int(m.currentList.currFocusItemIndex))
end function
