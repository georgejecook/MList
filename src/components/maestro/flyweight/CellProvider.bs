function init()
  reset()
end function

function onDebugMChange()
  m.top._m = m
  
end function

function reset(args = invalid)
  ? "resetting cell trackers"
  m.cellTypes = {}
  m.top.numberOfCells = 0
  m.top.numberOfCellsInUse = 0
end function

function getTrackers(cellType)
  trackers = m.cellTypes[cellType]
  if trackers = invalid
    trackers = { usedCellsById: {}
      allCells : []
      freeCellsById: {}
      numberOfCellsInPool: 0
    }
    m.cellTypes[cellType] = trackers 
  end if
  return trackers
end function

function addPreBakedCells(number, cellType = "SimpleCell")
  ? "adding "; number; " cells of type "; cellType
  trackers = getTrackers(cellType)
  for i = 0 to number
    cell = createObject("roSGNode", cellType)
    cell.id = str(trackers.numberOfCellsInPool).trim()
    trackers.numberOfCellsInPool++
    trackers.freeCellsById[cell.id] = cell
    trackers.allCells.push(cell)
    m.top.numberOfCells ++
  end for
  ? "finished making cells"
end function

function getCell(cellType = "SimpleCell")
  ' ? "asked for cell of "; cellType
  trackers = getTrackers(cellType)
  
  if trackers.freeCellsById.count() = 0
    ? "Ran out of cells:"
    if m.top.isCreateMoreEnabled
      ? " - creating one now"
      createCell(cellType)
    else
      ? "cant create more isCreateMoreEnabled is false"
      return invalid
    end if
  else
    for each id in trackers.freeCellsById
      exit for
    end for
  end if
  
  cell = trackers.freeCellsById[id]
  trackers.freeCellsById.delete(id)
  trackers.usedCellsById[id] = cell
  m.top.numberOfCellsInUse ++
  ' ? "returning cell with id"; id
  return cell
end function

function releaseCell(cell)
  if cell <> invalid
    ? "releasing cell "; cell.id
    trackers = getTrackers(cell.subType())
    trackers.usedCellsById.delete(cell.id)
    cell.getParent().removeChild(cell)
    trackers.freeCellsById[cell.id] = cell
    m.top.numberOfCellsInUse --
  end if
end function


function createCell(cellType)
  trackers = getTrackers(cellType)
  cell = creteObject("roSGNode", cellType)
  cell.id = str(trackers.numberOfCellsInPool).trim()
  trackers.allCells.push(cell)
  trackers.freeCellsById[cell.id] = cell
  return cell
end function
