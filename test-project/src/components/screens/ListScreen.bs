import "pkg:/source/roku_modules/ml/roku-list/ListDelegateMixin.brs"
import "pkg:/source/roku_modules/ml/roku-list/ListMixin.brs"
import "pkg:/source/ListScreenVM.bs"

function init()
  print "in FocusTestScene init"
  listHolder = m.top.findNode("listHolder")

  m.list = listHolder.createChild("ml_List")
  m.list.translation = [0, 0]
  m.cellProvider = m.global.cellProvider
  m.top._cellProvider = m.global.cellProvider
  m.cellTracker = m.global.cellTracker
  m.top._cellTracker = m.global.cellTracker
  m.contentId = 0
  m.listVM = new ListScreenVM(m.list)

  onResetChange()
  mv_initializeView(m.list)


  'delegate functions are implemented on m.listVM class
  ml_ListDelegateMixin_setListDelegate(m.list, m.listVM)

  ' m.list.observeField("itemSelected", "itemSelcetedChanged")
  ' m.list.observeField("itemFocused", "itemFocusedChanged")
  ' m.list.observeField("itemUnfocused", "itemUnfocusedChanged")
  ' m.list.observeField("itemSelected", "itemSelectedChanged")
  ' m.list.observeField("currFocusItemIndex", "currFocusItemIndexChanged")
end function

function onResetChange()
  ? "resetting"
  m.list.content = invalid

  cellSettings = ml_ListMixin_createCellSettings("ml_Cell", [480, 600], 100, 200)
  rowFocusSettings = ml_ListMixin_createFocusSettings(0.25, 0.1)
  rowSettings = ml_ListMixin_createRowSettings(cellSettings, rowFocusSettings, 100, invalid, 200)
  focusSettings = ml_ListMixin_createFocusSettings(0.3)

  rows = createData()
  m.list.content = ml_ListMixin_createListContent(rows, focusSettings, rowSettings)
end function

function makeRowSettings(speed, offset, size = [480, 600])
  cellSettings = ml_ListMixin_createCellSettings("ml_Cell", size, 100, 200)
  rowFocusSettings = ml_ListMixin_createFocusSettings(speed, 0.2)
  rowSettings = ml_ListMixin_createRowSettings(cellSettings, rowFocusSettings, 100, invalid, offset)
  return rowSettings
end function

function createData()

  rows = []
  for i = 0 to m.top._numberOfRows
    ' for i = 0 to 1
    row = createObject("roSGNode", "ml_HorizontalRowContent")
    rows.push(row)
    row.title = "ROW " + str(i)
    if i <> 0
      if i = 1
        row.settings = makeRowSettings(0.15, 350, [200,300])
        row.settings.contentOffset = [200, 0]
        row.title += " 350"
      else if i mod 5 = 0 or i = 6 or i = 7
        row.settings = makeRowSettings(0.15, 600, [400, 200])
        row.title += " 600"
      else if i mod 5 = 3
        row.settings = makeRowSettings(0.5, 100, [300, 800])
        row.settings.contentOffset = [400, 0]
        row.title += " 100"
      else
        row.settings = makeRowSettings(0.05, 0, [500, 500])
        row.title += " 0"
      end if
    end if

    if i = 10 or i = 14 or i = 19 or i = 22 or i = 23 or i = 28
      cellType = "RectComp"
      row.addFields({
        "cellType": cellType
      }) 
    end if



    row.appendChildren(makeItems(m.top._defaultCellType, 60))
  end for

  return rows
end function

function itemFocusedChanged()
  print "itemFocused changed to: "; m.list.itemFocused
end function

function itemSelcetedChanged()
  print "itemFocused changed to: "; m.list.itemFocused
  newScreen = createObject("roSGNode", "ListScreen")
  push(newScreen)
  mv_setFocus(newScreen)
end function

function itemUnfocusedChanged()
  print "itemUnfocused changed to: "; m.list.itemUnfocused
end function

function itemSelectedChanged()
  print "itemSelected changed to: "; m.list.itemSelected
end function


function currFocusItemIndexChanged()
end function

function onAddTypeOnes()
  addItems("ml_SimpleCell", m.top._addTypeOnes)
end function

function onAddComplex()
  addItems("ml_Cell", m.top._addTypeComplex)
end function

function onAddTypeTwos()
  addItems("ml_SimpleCell2", m.top._addTypeTwos)
end function

function onAddTypeOnePrebakes()
  m.cellProvider.callfunc("addPreBakedCells", m.top._addTypeOnePrebakes, "ml_SimpleCell")
end function

function onAddTypeTwoPrebakes()
  m.cellProvider.callfunc("addPreBakedCells", m.top._addTypeTwoPrebakes, "ml_SimpleCell2")
end function

function addItems(cellType, number)
  row = m.list.content.getChild(focusedRow)
  row.appendChildren(makeItems(cellType, number))
end function

function makeItems(cellType, number)
  d = createObject("roDateTime")
  nonce = str(d.asSeconds()).trim()
  items = []
  for i = 0 to number
    child = createObject("roSGNode", "ContentNode")
    child.id = str(m.contentId).trim()
    child.description = "some really long " + child.id + "text in here " + child.id
    child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/360/300?n=" + nonce
    child.title = "Item " + child.id.tostr()

    'TODO use the new mechansim for this...

    ' if m.contentId mod 5 = 0
    '   cellType = "ml_SimpleCell"
    ' else if m.contentId mod 7 = 0
    '   cellType = "ml_Cell"
    ' end if

    ' child.addFields({
    '   "cellType": cellType
    ' })
    items.push(child)
    m.contentId++
  end for
  return items
end function

function onRemove()
  row = m.list.content.getChild(focusedRow)

  startIndex = row.getChildCount() - m.top._removeItems
  children = row.getChildren(m.top._removeItems, startIndex)
  row.removeChildren(children)

end function

function toggleCellState(items, state)

  for each item in items
    if item <> invalid
      dynamicCell = m.cellTracker.callFunc("getCellForContentId", item.id)
      if dynamicCell <> invalid
        ' ? "setting renderState on dynamic cell " ; dynamicCell.trackingId ; " content Id " ; item.id
        dynamicCell.renderState = state
      end if
    end if
  end for

end function

function onHideRow()
  ? "onHide" 

  row = m.list.content.getChild(focusedRow)
  toggleCellState(getRowItems(row, m.top._hideRowItems), "none")
end function


function onShowRow()
  ? "onShow"

  row = m.list.content.getChild(focusedRow)
  toggleCellState(getRowItems(row, m.top._showRowItems), "rendered")
end function

function getRowItems(row, number)
  items = []
  for i = 0 to number
    items.push(row.getChild(i))
  end for

  return items
end function

function onHideItems()
  for i = 0 to m.top._hideItems
    dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
    if dynamicCell <> invalid
      dynamicCell.renderState = "none"
    end if
  end for
end function

function onShowItems()
  for i = 0 to m.top._showItems
    dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
    if dynamicCell <> invalid
      dynamicCell.renderState = "rendered"
    end if
  end for
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ keypresses
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyPressOption() as boolean
  ? "pressed option"
  return true
end function

function onKeyPressFastForward() as boolean
  return true
end function

function onKeyPressBack() as boolean
  ? "going back!"

  if not m.top.isRoot
    m.list.isHidden = true
    pop()
  end if
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onShow()
  m.list.isHidden = false
  mv_setFocus(m.list)
end function

function onHide()
  m.list.isHidden = true
end function

function onGainedFocus(isSelfFocused)
  m.logInfo("onGainedFocus", isSelfFocused)
  if isSelfFocused
    mv_setFocus(m.list)
  end if
end function